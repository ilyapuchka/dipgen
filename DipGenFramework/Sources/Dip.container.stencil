// This is a generated file, do not edit!
// Generated by dipgen, see https://github.com/ilyapuchka/dipgen

{% for import in imports %}import {{ import }}
{% endfor %}{% for registration in container.registrations %}{% if registration.storyboardInstantiatable %}
extension {{ registration.factory.type }}: StoryboardInstantiatable {}{% endif %}{% endfor %}

let {{ container.name }}Container = DependencyContainer { container in
    unowned let container = container{% if container.isUIContainer %}
    DependencyContainer.uiContainers.append(container){% endif %}
    {% for registration in container.registrations %}
    container.register({% if registration.scope %}.{{ registration.scope }}, {% endif %}{% if registration.registerAs %}type: {{ registration.registerAs }}.self, {% endif %}{% if registration.tag %}tag: "{{ registration.tag }}", {% endif %}factory: {% if registration.factory.arguments %}{ {{ registration.factory.closure.argumentsNames|join }} in
        {{ registration.factory.closure.body }}
    }{% else %}{{ registration.factory.type }}.{{ registration.factory.constructor }}{% endif %}){% if registration.implements %}
        .implements({{ registration.implements }}){% endif %}{% if registration.resolvingProperties %}
        .resolvingProperties { container, resolved in
            let resolved = resolved as! {{ registration.factory.type }}
            {% for property in registration.resolvingProperties %}
            resolved.{{ property.name }} = try container.resolve({% if property.tag %}tag: "{{ property.tag }}"{% endif %}){% if property.resolveAs %} as {{ property.resolveAs }}{% endif %}{%endfor%}
    }{% endif %}{% endfor %}
}

class {{ container.name|titlecase }}Factory {

    private let container: DependencyContainer

    init(container: DependencyContainer = {{ container.name }}Container) {
        self.container = container
    }
    {% for registration in container.registrations %}
    func {{ registration.name|camelcase }}{% if registration.tag %}{{ registration.tag|titlecase }}{% endif %}({% if registration.factory.arguments %}{{ registration.factory.methodArguments|join }}{% endif %}) -> {% if registration.registerAs %}{{ registration.registerAs }}{% else %}{{ registration.factory.type }}{% endif %} {
        return try! container.resolve({% if registration.tag %}tag: "{{ registration.tag }}"{% endif %}{% if registration.factory.arguments %}{% if registration.tag %}, {% endif %}arguments: {{ registration.factory.closure.internalArgumentsNames|join }}{% endif %})
    }
    {% endfor %}
}
