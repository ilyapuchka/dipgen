// This is a generated file, do not edit!
// Generated by dipgen, see https://github.com/ilyapuchka/dipgen

{% for import in imports %}{{ import }}
{% endfor %}{% for storyboardExtension in storyboardExtensions %}
extension {{ storyboardExtension }}: StoryboardInstantiatable {}{% endfor %}
{% for container in containers %}
let {{ container.name }} = DependencyContainer { container in
    unowned let container = container{% if container.isUIContainer %}
    DependencyContainer.uiContainers.append(container){% endif %}
    {% for registration in container.registrations %}
    container.register(.{{ registration.scope }},{% if registration.registerAs %} type: {{ registration.registerAs }}.self,{% endif %}{% if registration.tag %} tag: "{{ registration.tag }}",{% endif %} factory: {% if registration.factory.arguments %}{ {{ registration.factory.closure.arguments }} in
        {{ registration.factory.closure.body }}
    }{% else %}{{ registration.factory.type }}.{{ registration.factory.constructor }}{% endif %}){% if registration.implements %}
        .implements({{ registration.implements }}){% endif %}{% if registration.resolvingProperties %}
        .resolvingProperties { container, resolved in
            let resolved = resolved as! {{ registration.factory.type }}
            {% for property in registration.resolvingProperties %}
            resolved.{{ property.name }} = try container.resolve({% if property.tag %}tag: "{{ property.tag }}"{% endif %}){% if property.resolveAs %} as {{ property.resolveAs }}{% endif %}{%endfor%}
    }{% endif %}{% endfor %}
}
{% endfor %}

extension DependencyContainer {

    static func configureAll() { {% for container in containers %}
        let _ = {{ container.name }}{% endfor %}
    }

    static func bootstrapAll() throws { {% for container in containers %}
        try {{ container.name }}.bootstrap(){% endfor %}
    }

}
