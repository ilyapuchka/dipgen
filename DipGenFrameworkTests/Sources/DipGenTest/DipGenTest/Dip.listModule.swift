// This is a generated file, do not edit!
// Generated by dipgen, see https://github.com/ilyapuchka/dipgen

import Foundation
import UIKit
import Dip
import DipUI

let listModuleContainer = DependencyContainer { container in
    unowned let container = container
    
    container.register(.Unique, type: SomeProtocol.self, tag: "some tag", factory: ListWireframe.init(rootWireframe:addWireframe:listPresenter:))
        .implements(NSObject.self, SomeProtocol.self)
        .resolvingProperties { container, resolved in
            let resolved = resolved as! ListWireframe
            
            resolved.addWireframe = try container.resolve(tag: "tag") as AddWireframe
            resolved.listPresenter = try container.resolve()
            resolved.rootWireframe = try container.resolve()
    }
}

class ListModuleFactory {

    private let container: DependencyContainer

    init(container: DependencyContainer = listModuleContainer) {
        self.container = container
    }

    func listWireframe() -> SomeProtocol {
        return try! container.resolve()
    }
    
}
